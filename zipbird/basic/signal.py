"""
Signal generated by strategy.

Signal only contains:
  stock
  open or close
  long or short
  limit price if to open at a specific price
"""
from zipbird.basic.types import OpenClose, LongShort

class Signal:
    stock: str
    open_close: OpenClose
    long_short: LongShort
    # Intended open price
    # There are signals that only open a position when
    # the price reaches the limit price on next session.
    limit_price: float | None

    def __init__(self, stock, open_close:OpenClose, long_short:LongShort, limit_price:float=None):
        self.stock = stock
        self.open_close = open_close
        self.long_short = long_short
        self.limit_price = limit_price

    @staticmethod
    def make_close_long(stock):
        return Signal(stock, OpenClose.Close, LongShort.Long)

    @staticmethod
    def make_open_long(stock, limit_price=None):
        return Signal(stock, OpenClose.Open, LongShort.Long, limit_price)
    
    @staticmethod
    def make_close_short(stock):
        return Signal(stock, OpenClose.Close, LongShort.Short)

    @staticmethod
    def make_open_short(stock, limit_price=None):
        return Signal(stock, OpenClose.Open, LongShort.Short, limit_price)
    
    def __eq__(self, other):
        if not isinstance(other, Signal):
            return NotImplemented
        return (self.stock == other.stock and
                self.open_close == other.open_close and
                self.long_short == other.long_short and
                self.limit_price == other.limit_price)
    
    def __repr__(self):
        return (f"Signal(stock='{self.stock}', open_close={self.open_close}, "
                f"long_short={self.long_short}, limit_price={self.limit_price})")
